import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns

# ===============================
# Pega o modelo no GitHub
# ===============================
@st.cache_resource
def carregar_modelo():
    url = "https://github.com/Kinrider/tech_challenge_4/raw/refs/heads/main/Modelo/xgb_petroleo_model.pkl"
    response = requests.get(url)
    from io import BytesIO
    modelo = joblib.load(BytesIO(response.content))
    return modelo

modelo = carregar_modelo()

# ===============================
# Captura dado no IPEA
# ===============================
@st.cache_data
def carregar_dados_ipea():
    codigo_serie = 'EIA366_PBRENT366'
    url = f"http://ipeadata.gov.br/api/odata4/ValoresSerie(SERCODIGO='{codigo_serie}')"
    response = requests.get(url)
    dados_json = response.json()
    dados = dados_json['value']
    df = pd.DataFrame(dados)[['VALDATA', 'VALVALOR']]
    df.columns = ['Data', 'Valor']
    df['Data'] = df['Data'].str[:10]
    df['Data'] = pd.to_datetime(df['Data'])
    df = df.sort_values("Data")
    return df

df_dados = carregar_dados_ipea()

# ===============================
# cria√ß√£o de  feature
# ===============================
def preparar_dados_com_features(df):
    df = df.copy()
    df = df.sort_values("Data")
    df["lag1"] = df["Valor"].shift(1)
    df["lag2"] = df["Valor"].shift(2)
    df["lag7"] = df["Valor"].shift(7)
    df["roll_mean_3"] = df["Valor"].rolling(window=3).mean()
    df["roll_mean_7"] = df["Valor"].rolling(window=7).mean()
    df["day"] = df["Data"].dt.day
    df["month"] = df["Data"].dt.month
    df["weekday"] = df["Data"].dt.weekday
    df = df.dropna()
    return df

def gerar_features_para_data(df, data_input):
    df = df[df["Data"] < data_input]  # filtra at√© o dia anterior
    df = preparar_dados_com_features(df)
    ultima_linha = df.iloc[-1]
    features = pd.DataFrame([{
        "lag1": ultima_linha["lag1"],
        "lag2": ultima_linha["lag2"],
        "lag7": ultima_linha["lag7"],
        "roll_mean_3": ultima_linha["roll_mean_3"],
        "roll_mean_7": ultima_linha["roll_mean_7"],
        "day": data_input.day,
        "month": data_input.month,
        "weekday": data_input.weekday()
    }])
    return features

# ===============================
# Habilitando abas para exibi√ß√£o
# ===============================
tab1, tab2 , tab3 = st.tabs(["Insights e an√°lises", "Modelagem", "Previs√£o" ])

# --- Aba 1: Visualiza√ß√£o + Eventos ---
with tab1:
    st.title("üìà Visualiza√ß√£o Hist√≥rica do Pre√ßo do Petr√≥leo Brent")

    st.subheader("Pre√ßo Hist√≥rico do Petr√≥leo Brent (USD)")
    st.line_chart(df_dados.set_index("Data")["Valor"])

    st.subheader("S√©rie Hist√≥rica com Fatos Destacados")
    fig, ax = plt.subplots(figsize=(14, 6))
    sns.lineplot(x="Data", y="Valor", data=df_dados, ax=ax)

    # Eventos destacados
    ax.axvline(pd.Timestamp("2003-03-20"), color="black", linestyle="--")
    ax.text(pd.Timestamp("2003-03-20"), df_dados["Valor"].max()*0.9, "Invas√£o do Iraque", color="black")

    ax.axvspan(pd.Timestamp("2008-07-01"), pd.Timestamp("2009-01-01"), color="red", alpha=0.2)
    ax.text(pd.Timestamp("2008-07-01"), df_dados["Valor"].max()*0.95, "Crise de 2008", color="red")

    ax.axvspan(pd.Timestamp("2020-03-01"), pd.Timestamp("2020-05-01"), color="orange", alpha=0.2)
    ax.text(pd.Timestamp("2020-03-10"), df_dados["Valor"].min()*1.05, "COVID-19", color="orange")

    ax.axvline(pd.Timestamp("2022-02-24"), color="purple", linestyle="--")
    ax.text(pd.Timestamp("2022-02-25"), df_dados["Valor"].max()*0.85, "Invas√£o da Ucr√¢nia", color="purple")

    ax.set_title("S√©rie Hist√≥rica com fatos destacados")
    ax.grid(True)
    st.pyplot(fig)

    st.subheader("An√°lise explorat√≥ria - Insights e an√°lises:")

    EDA = """
    1. Vis√£o geral do comportamento do pre√ßo ao longo do tempo

    O pre√ßo do Brent apresentou oscila√ß√µes marcantes ao longo dos √∫ltimos 30 anos, refletindo per√≠odos de estabilidade, choques abruptos e tend√™ncias de longo prazo. Grandes picos e quedas est√£o associados a eventos econ√¥micos globais, conflitos geopol√≠ticos e transforma√ß√µes estruturais no mercado de petr√≥leo.  
    Observando o gr√°fico de pre√ßo ao longo do tempo, √© poss√≠vel identificar tend√™ncias, picos e quedas.

    **Pontos de aten√ß√£o:**  
    - O gr√°fico mostra que, entre 2003 e 2008, houve uma forte alta (associada √† Guerra do Iraque e ao crescimento global), seguida de uma queda brusca em 2008-2009 (Crise Financeira Global).  
    - Entre 2014 e 2016, outra grande queda, relacionada √† Revolu√ß√£o do Xisto nos EUA e ao Colapso dos Pre√ßos do Petr√≥leo.  
    - Em 2020, a Pandemia de COVID-19 levou o pre√ßo a m√≠nimas hist√≥ricas, com posterior recupera√ß√£o.

    O Brent alterna per√≠odos de estabilidade com choques abruptos. Ap√≥s grandes eventos, o pre√ßo raramente retorna rapidamente ao patamar anterior, estabelecendo novos n√≠veis m√©dios.

    2. Eventos com maior impacto no pre√ßo

    Com base nos dados do pre√ßo Brent durante o per√≠odo de cada evento, os maiores impactos absolutos (diferen√ßa entre o pre√ßo m√°ximo e m√≠nimo durante o evento) foram:

    | Evento                           | Pre√ßo M√≠nimo | Pre√ßo M√°ximo | Impacto Real (US$) |
    |---------------------------------|--------------|--------------|-------------------|
    | Guerra do Iraque                 | 23,23        | 143,95       | 120,72            |
    | Revolu√ß√£o do Xisto nos EUA       | 26,01        | 115,19       | 89,18             |
    | Pandemia de COVID-19             | 9,12         | 85,76        | 76,64             |
    | Invas√£o da Ucr√¢nia pela R√∫ssia   | 61,57        | 133,18       | 71,61             |
    | Crise Financeira Global          | 33,73        | 102,09       | 68,36             |
    | Colapso dos Pre√ßos do Petr√≥leo   | 26,01        | 79,62        | 53,61             |
    | Primavera √Årabe                  | 88,69        | 128,14       | 39,45             |
    | Crise Energ√©tica na Europa       | 71,03        | 99,87        | 28,84             |
    | Guerra do Golfo                 | 17,68        | 41,45        | 23,77             |
    | Reabertura da China P√≥s-COVID    | 71,03        | 88,31        | 17,28             |

    Os maiores impactos absolutos coincidem com eventos prolongados e/ou de grande magnitude, como guerras, transforma√ß√µes estruturais e crises globais.

    3. Categorias de eventos mais impactantes ‚Äì com base nos 10 eventos com maior impacto no pre√ßo

    Levando-se em considera√ß√£o os 10 eventos com maior impacto (an√°lise gerada no t√≥pico anterior), a m√©dia do impacto real por categoria de evento √©:

    | Categoria do Evento                              | Quantidade de Eventos | Impacto M√©dio (US$) |
    |-------------------------------------------------|----------------------|--------------------|
    | Crises Econ√¥micas Globais ou Regionais           | 2                    | 72,50              |
    | Transforma√ß√µes Estruturais no Mercado de Petr√≥leo| 2                    | 71,39              |
    | Conflitos Geopol√≠ticos e Guerras                 | 4                    | 63,88              |
    | Fatores de Incerteza ou Choques Pontuais         | 2                    | 23,06              |

    Crises Econ√¥micas e transforma√ß√µes estruturais s√£o os eventos que mais movimentam o pre√ßo do petr√≥leo Brent, seguidos por Conflitos Geopol√≠ticos ou Guerras. Fatores de Incerteza, embora possam apresentar varia√ß√µes imediatas grandes e tenha um impacto tamb√©m relevante, tendem a n√£o prolongar o seu efeito.

    4. Rela√ß√£o entre dura√ß√£o do evento e impacto ‚Äì avaliando todos os eventos do per√≠odo.

    A an√°lise mostra que eventos de longa dura√ß√£o tendem a apresentar maiores impactos absolutos, mas h√° exce√ß√µes. Por exemplo:

    | Categoria de Evento                              | Dura√ß√£o M√©dia (dias) | Impacto M√©dio (US$) |
    |-------------------------------------------------|---------------------|--------------------|
    | Conflitos Geopol√≠ticos e Guerras (1)            | 1331                | 63,88              |
    | Transforma√ß√µes Estruturais no Mercado de Petr√≥leo| 757                 | 71,39              |
    | Crises Econ√¥micas Globais ou Regionais           | 377                 | 41,24              |
    | Fatores de Incerteza ou Choques Pontuais (2)     | 223                 | 23,06              |

    (1) Nesta categoria foram desconsiderados os eventos: Crise do Petr√≥leo de 1973, Revolu√ß√£o Iraniana, Guerra do Ir√£ ‚Äì Iraque e Ataques √† Saudi Aramco. Para os tr√™s primeiros casos, n√£o temos os dados do pre√ßo do petr√≥leo, j√° que nossa base se inicia em 1987, e os eventos foram anteriores, j√° os Ataques a Saudi Aramco, s√£o considerados como dura√ß√£o de dura√ß√£o de 1 √∫nico dia, o que distorceria os resultados.  
    (2) Nesta categoria foi desconsiderado o evento dos ataques de 11 de setembro, pois s√£o considerados como dura√ß√£o de 1 √∫nico dia, o que distorceria os resultados.

    Eventos mais longos, como guerras e transforma√ß√µes estruturais, tendem a gerar maiores oscila√ß√µes acumuladas, enquanto choques pontuais t√™m impacto mais limitado, mas podem ser relevantes dependendo do contexto.

    **Pontos de Aten√ß√£o:**  
    - Guerra do Iraque: dura√ß√£o longa (quase 9 anos), impacto absoluto muito alto.  
    - Pandemia de COVID-19: dura√ß√£o relativamente curta, mas impacto elevado.  
    - Reabertura da China P√≥s-COVID: curta dura√ß√£o, impacto menor.

    N√£o existe uma rela√ß√£o linear, a intensidade do evento √© t√£o ou mais importante que a sua dura√ß√£o.

    **Conclus√£o:**  
    O comportamento do Brent √© altamente sens√≠vel a eventos globais, com grandes oscila√ß√µes associadas a guerras, transforma√ß√µes estruturais no mercado e crises econ√¥micas. Transforma√ß√µes estruturais e conflitos geopol√≠ticos s√£o, em m√©dia, os eventos mais impactantes. O tempo de recupera√ß√£o do pre√ßo ap√≥s grandes choques √© longo, frequentemente superior a uma d√©cada, indicando que choques desse porte alteram de forma duradoura o patamar de pre√ßo do Brent. A dura√ß√£o do evento est√° relacionada ao impacto acumulado, mas choques pontuais tamb√©m podem provocar movimentos bruscos. O monitoramento cont√≠nuo do contexto global e das tend√™ncias estruturais √© fundamental para antecipar movimentos do Brent.
    """

    st.markdown(EDA)
    
# --- Aba 2: Escolha do modelo ---    
with tab2:
    st.title("üîç Modelagem")

    st.subheader("ETL + Modelo utilizado")
    
    st.markdown(
    '<a href="https://github.com/Kinrider/tech_challenge_4/blob/8692a219b911901de775aaff5a79d10b7034f577/Modelo/modelo_previsao_preco_petrole.ipynb" target="_blank">Clique aqui para visualizar o notebook do modelo</a>',
    unsafe_allow_html=True
    )   
    
    st.markdown("""
                                
    1. Coleta dos Dados (API)
    Capturamos os dados do pre√ßo do petr√≥leo Brent direto da API do IPEA, os dados buscados s√£o retornados em JSON, que posteriormente √© organizado em um data frame do pandas, com as colunas de data e valor do petr√≥leo.

    2. Tratamento dos Dados
    √â feito o ordenamento pela data e eliminamos informa√ß√µes repetidas. Tamb√©m ajustamos o formato das datas e deixamos os nomes das colunas padronizadas. Depois disso, fazemos uma an√°lise para entender melhor o comportamento dos pre√ßos (m√©dia, varia√ß√µes).

    3. Testando os Modelos
    Nesta etapa foram realizados testes com alguns modelos pra tentar prever como o pre√ßo do petr√≥leo pode se comportar no futuro.

        ‚úÖ 1. Modelo Naive (baseline)
        Este modelo assume que o pr√≥ximo valor vai ser igual ao √∫ltimo. Serve como compara√ß√£o.
        
        ‚úÖ 2. XGBoost
        Eficiente em problemas de regress√£o e capacidade de lidar com rela√ß√µes n√£o lineares nos dados. Ele utiliza √°rvores de decis√£o com boosting, otimizando erros iterativamente.
       
        ‚úÖ 3. LSTM (rede neural)
        rede neural recorrente, foi aplicada para explorar padr√µes temporais nos dados. Como o pre√ßo do petr√≥leo tem depend√™ncia temporal, a LSTM poderia capturar melhor tend√™ncias de longo prazo, demonstrou ser consideravelmente mais lendo que os demais modelos na etapa de treinamento.
       
        ‚úÖ 4. Prophet (Facebook)
        Desenvolvido para s√©ries temporais, lida bem com sazonalidade e outliers. Ele foi testado por sua facilidade de uso e capacidade de decompor tend√™ncias, mas pode n√£o ser t√£o eficiente quanto o XGBoost em conjuntos de dados menores ou menos complexos.


    4. Avalia√ß√£o dos Modelos:

    Usamos m√©tricas como o MAE (erro m√©dio), o RMSE (erro quadr√°tico m√©dio) e o R¬≤ (que mostra o quanto o modelo explica os dados).

    | Modelo   | MAE    | RMSE   | R¬≤      |
    |----------|--------|--------|---------|
    | Naive    | 2.477  | 3.084  | -0.254  |
    | XGBoost  | 0.457  | 0.567  | 0.958   |
    | LSTM     | 0.877  | 1.079  | 0.846   |
    | Prophet  | 37.266 | 37.558 | -66.102 |

    5. Modelo escolhido:
    
    O XGBoost foi selecionado por equilibrar desempenho e interpretabilidade, al√©m de apresentar m√©tricas superiores em compara√ß√£o aos outros modelos testados. Sua efici√™ncia computacional e adaptabilidade a diferentes cen√°rios o tornaram a melhor op√ß√£o
    """)

# --- Aba 3: Previs√£o ---
with tab3:
    st.title("üìä Previs√£o do Pre√ßo do Petr√≥leo Brent")
    
    texto1 = """
    
    Obs:
    
    - O modelo est√° conectado diretamente aos dados do IPEA, e a previs√£o √© feita para at√© 30 dias a partir do √∫ltimo dados divulgado.
    
    - Selecione no calend√°rio abaixo a data para qual deseja obter a previs√£o do pre√ßo do petr√≥leo.
    
    """ 
    st.markdown(texto1)   
    
    ultima_data = df_dados["Data"].max()
    max_data_permitida = ultima_data + timedelta(days=30)

    data_input = st.date_input(
        "Escolha a data para previs√£o:",
        min_value=ultima_data + timedelta(days=1),
        max_value=max_data_permitida,
        value=ultima_data + timedelta(days=1)
    )
    data_input = pd.to_datetime(data_input)

    if st.button("Prever"):
        if data_input <= ultima_data:
            st.error("‚ùå A data selecionada deve ser posterior √† √∫ltima data com dados dispon√≠veis.")
        else:
            try:
                datas_para_prever = pd.date_range(start=ultima_data + timedelta(days=1), end=data_input)

                previsoes = []
                df_temp = df_dados.copy()

                for data_prev in datas_para_prever:
                    features = gerar_features_para_data(df_temp, data_prev)
                    pred = modelo.predict(features)[0]

                    previsoes.append({"Data": data_prev, "Preco_Previsto": pred})

                    nova_linha = {
                        "Data": data_prev,
                        "Valor": pred
                    }
                    df_temp = pd.concat([df_temp, pd.DataFrame([nova_linha])], ignore_index=True)

                df_previsoes = pd.DataFrame(previsoes)
                df_previsoes["Data"] = pd.to_datetime(df_previsoes["Data"])

                # --- Gr√°fico ---
                fig, ax = plt.subplots(figsize=(12, 5))

                # Dados reais - √∫ltimos 30 dias antes da √∫ltima data de dados
                inicio_real = ultima_data - timedelta(days=29)
                df_reais_30 = df_dados[(df_dados["Data"] >= inicio_real) & (df_dados["Data"] <= ultima_data)]

                ax.plot(df_reais_30["Data"], df_reais_30["Valor"], label="Valores Reais", color="blue")

                # Dados previstos - do dia seguinte at√© data_input
                ax.plot(df_previsoes["Data"], df_previsoes["Preco_Previsto"], label="Previs√£o", color="orange")

                ax.set_title(f"Previs√£o do Petr√≥leo Brent at√© {data_input.strftime('%d/%m/%Y')}")
                ax.set_xlabel("Data")
                ax.set_ylabel("Pre√ßo (USD)")
                ax.legend()
                ax.grid(True)
                plt.xticks(rotation=45)
                st.pyplot(fig)

                # Ajustar formato da data para exibir na tabela
                df_previsoes["Data"] = df_previsoes["Data"].dt.strftime('%d/%m/%Y')

                st.success(f"üìà Previs√µes geradas para {len(df_previsoes)} dias at√© {data_input.strftime('%d/%m/%Y')}")
                st.dataframe(df_previsoes)

            except Exception as e:
                st.error(f"Erro ao gerar previs√£o: {e}")